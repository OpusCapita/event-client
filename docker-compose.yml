version: '2'
services:
    main:
        build: .
        depends_on:
            - zoo3
            - registrator
            - rabbit2
            - consul
            - kafka1
            - kafka2
            - kafka3
        environment:
            RABBITMQ_USER: $RABBITMQ_USER
            RABBITMQ_PASS: $RABBITMQ_PASS

    rabbit1:
        image: opuscapita/rabbitmq:dev
        hostname: rabbit1
        ports:
            - '4369:4369'
            - '5671:5671'
            - '5672:5672'
            - '15672:15672'
            - '25672:25672'
            - '6666:6666'
        environment:
            RABBITMQ_DEFAULT_USER: $RABBITMQ_USER
            RABBITMQ_DEFAULT_PASS: $RABBITMQ_PASS
            SERVICE_5672_NAME: 'rabbitmq-amqp'
            RABBITMQ_ERLANG_COOKIE: $RABBITMQ_ERLANG_COOKIE
            KILL_PORT: 6666
        depends_on:
            - consul

    rabbit2:
        image: opuscapita/rabbitmq:dev
        hostname: rabbit2
        ports:
            - '4370:4369'
            - '5673:5671'
            - '5674:5672'
            - '15673:15672'
            - '25673:25672'
            - '6667:6666'
        environment:
            RABBITMQ_DEFAULT_USER: $RABBITMQ_USER
            RABBITMQ_DEFAULT_PASS: $RABBITMQ_PASS
            SERVICE_5672_NAME: 'rabbitmq-amqp'
            RABBITMQ_ERLANG_COOKIE: $RABBITMQ_ERLANG_COOKIE
            KILL_PORT: 6666
            CLUSTER_WITH: 'rabbit1'
        # command: ["/wait-for", "rabbit1:5672", "--", "rabbitmq-server"]
        depends_on:
            - rabbit1
            - consul

    zoo1:
        image: zookeeper
        restart: always
        hostname: zoo1
        ports:
            - 2181:2181
        environment:
            ZOO_MY_ID: 1
            ZOO_SERVERS: server.1=0.0.0.0:2888:3888 server.2=zoo2:2888:3888 server.3=zoo3:2888:3888

    zoo2:
        image: zookeeper
        restart: always
        hostname: zoo2
        ports:
            - 2182:2181
        environment:
            ZOO_MY_ID: 2
            ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=0.0.0.0:2888:3888 server.3=zoo3:2888:3888
        depends_on:
            - zoo1

    zoo3:
        image: zookeeper
        restart: always
        hostname: zoo3
        ports:
            - 2183:2181
        environment:
            ZOO_MY_ID: 3
            ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=zoo2:2888:3888 server.3=0.0.0.0:2888:3888
        depends_on:
            - zoo2

    kafka1:
        image: wurstmeister/kafka
        ports:
            - '9092'
        environment:
            KAFKA_BROKER_ID: 0
            # KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
            KAFKA_NUM_PARTITIONS: 12
            KAFKA_DEFAULT_REPLICATION_FACTOR: 3
            KAFKA_MIN_INSYNC_REPLICAS: 2
            KAFKA_PORT: 9092
            KAFKA_ADVERTISED_HOST_NAME: 'kafka1'
            KAFKA_LISTENERS: 'PLAINTEXT://:9092'
            KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka1:9092'
            KAFKA_ZOOKEEPER_CONNECT: zoo1:2181
            KAFKA_ZOOKEEPER_CONNECTION_TIMEOUT_MS: 30001
            KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 3000
            KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE: 'false'
            KAFKA_CONTROLLER_SHUTDOWN_ENABLE: 'true'
            KAFKA_JMX_OPTS: "-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=127.0.0.1 -Dcom.sun.management.jmxremote.rmi.port=1099"
            JMX_PORT: 1099
        depends_on:
            - zoo1

    kafka2:
        image: wurstmeister/kafka
        ports:
            - '9093:9093'
        environment:
            KAFKA_BROKER_ID: 1
            # KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
            KAFKA_NUM_PARTITIONS: 12
            KAFKA_DEFAULT_REPLICATION_FACTOR: 3
            KAFKA_MIN_INSYNC_REPLICAS: 2
            KAFKA_PORT: 9093 # Needed for automatic topic creation ... m(
            KAFKA_ADVERTISED_HOST_NAME: 'kafka2'
            KAFKA_LISTENERS: 'PLAINTEXT://:9093'
            KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka2:9093'
            KAFKA_ZOOKEEPER_CONNECT: zoo1:2181
            KAFKA_ZOOKEEPER_CONNECTION_TIMEOUT_MS: 30001
            KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 3000
            KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE: 'false'
            KAFKA_CONTROLLER_SHUTDOWN_ENABLE: 'true'
            KAFKA_JMX_OPTS: "-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=127.0.0.1 -Dcom.sun.management.jmxremote.rmi.port=1100"
            JMX_PORT: 1100
        depends_on:
            - zoo1

    kafka3:
        image: wurstmeister/kafka
        ports:
            - '9094:9094'
        environment:
            KAFKA_BROKER_ID: 2
            # KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
            KAFKA_NUM_PARTITIONS: 12
            KAFKA_DEFAULT_REPLICATION_FACTOR: 3
            KAFKA_MIN_INSYNC_REPLICAS: 2
            KAFKA_PORT: 9094 # Needed for automatic topic creation ... m(
            KAFKA_ADVERTISED_HOST_NAME: 'kafka3'
            KAFKA_LISTENERS: 'PLAINTEXT://:9094'
            KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka3:9094'
            KAFKA_ZOOKEEPER_CONNECT: zoo1:2181
            KAFKA_ZOOKEEPER_CONNECTION_TIMEOUT_MS: 30001
            KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 3000
            KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE: 'false'
            KAFKA_CONTROLLER_SHUTDOWN_ENABLE: 'true'
            KAFKA_JMX_OPTS: "-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=127.0.0.1 -Dcom.sun.management.jmxremote.rmi.port=1101"
            JMX_PORT: 1101
            # KAFKA_CREATE_TOPICS: "test:10:3,second:2:2,pattern.one:10:3,pattern.two:10:3"
        depends_on:
            - zoo1

    registrator:
        image: gliderlabs/registrator
        command: -internal consul://consul:8500
        volumes:
            - /var/run/docker.sock:/tmp/docker.sock
        depends_on:
            - consul
        restart: on-failure

    consul:
        image: consul:latest
        ports:
            - '8400:8400'
            - '8500:8500'
            - '8600:53/udp'
        labels:
            SERVICE_IGNORE: 'true'  # Do not add any of Consul's services to Consul's service discovery registry.
        command: [agent, '-server', '-ui', '-bootstrap', '-client=0.0.0.0']
